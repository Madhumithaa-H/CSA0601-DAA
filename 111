DIF-FFT                                                              
clear;
clc ;
close ;
x = [1,2,3,4,4,3,2,1];
X = fft (x , -1);
disp(X,'X(z) = ');

DIT-FFT
clear;
clc ;
close ;
x = [1,-1,-1,-1,1,1,1,-1];
X = fft (x , -1);
disp(X,'X(z) = ');

bilinear transformation
s = poly(0, 's'); z = poly(0, 'z'); 
H = 0.2 * %pi / (s + 0.2 * %pi); 
Hz = horner(H, 2 * (z - 1) / (z + 1)); 
plot(frmag(Hz(2), Hz(3), 512)); 
xgrid(1); xtitle('Magnitude Response', 'Frequency Index', 'Magnitude');

impulse variant transformation
s = poly(0, 's'); z = poly(0, 'z'); 
Hz = horner(0.2 * %pi / (s + 0.2 * %pi), 1 - z^(-1)); 
plot(frmag(Hz(2), Hz(3), 512)); xgrid(1); 
xtitle('Magnitude Response', 'Frequency Index', 'Magnitude');

BAND WIDTH
clear; 
clc; 
close; 
s = poly(0,'s'); 
Omegac = 0.2*%pi; 
H = Omegac/(s+Omegac); 
T =1;//Sampling period T = 1 Second 
z = poly(0,'z'); 
Hz = horner(H,(2/T)*((z-1)/(z+1))) 
HW  =frmag(Hz(2),Hz(3),512); 
W = 0:%pi/511:%pi; 
plot(W/%pi,HW) 
a=gca(); 
a.thickness = 3; 
a.foreground = 1; 
a.font_style = 9;  
xgrid(1) 
xtitle('Magnitude Response of Single pole LPF Filter Cutoff frequency = 0.2*pi','Digital Frequency--->','Magnitude'); 
Disp(“Hz”,Hz)

UNIT STEP
t = -5:0.1:5;                // Time values from -5 to 5
y = zeros(1, length(t));     // Initialize the signal with zeros
y(t >= 0) = 1;               // Set values to 1 where t >= 0
plot(t, y, "LineWidth", 2);  // Plot the signal
xlabel("Time (t)");          // Label the x-axis
ylabel("u(t)");              // Label the y-axis

UNIT RAMP SIGNAL
t = 0:0.1:10;  
ramp = t;  
plot(t, ramp);
xlabel("Time (t)");
ylabel("Amplitude");
title("Unit Ramp Signal");

UNIT IMPULSE SIGNAL
t = -5:0.1:5; 
impulse = zeros(t);
impulse(t == 0) = 1;
plot(t, impulse);
xlabel('Time');
ylabel('Amplitude');
title('Unit Impulse Signal')

EXPONENTIAL SIGNAL
// Exponential Signal
t = 0:0.01:2; y = exp(-t / 0.5);  // Time vector and signal
plot(t, y); xlabel("Time (s)"); ylabel("Amplitude"); title("Exponential Signal");

UNIFORM RANDOM SIGNAL
a = -1;  // Lower bound
b = 1;   // Upper bound
N = 1000;  // Number of samples
// Generate uniform random signal
t = 1:N;  // Time or sample index
y_uniform = a + (b - a) * rand(1, N);  // rand generates values between 0 and 1, scaled to [a, b]
// Plot the uniform random signal
plot(t, y_uniform, "LineWidth", 2);
xlabel("Samples (n)");
ylabel("Amplitude");
title("Uniform Random Signal");

sine signal
// Sine Wave Plot
fs = 100; t = 0:1/fs:1;      // Sampling and time vector
y = sin(2 * %pi * 5 * t);    // Sine wave
plot(t, y);                  // Plot
xlabel("Time (s)"); ylabel("Amplitude"); title("Sine Wave");

15.

clear;  
clc;  
//xdel(winsid());  
mode(0);  
s=%s;  
//H=s^4+2*s^3+3*s^2+4*s+5;  
H=s^5+7*s^4+6*s^3+42*s^2+8*s+56;  
disp(H,'The given characteristics equation 1-G(s)H(s)=');  
c=coeff(H);  
len=length(c);  
r=routh_t(H);  
disp(r,"Rouths table=");  
x=0;  
for i=1:len  
if(r(i,1)<0)  
x=x+1;  
end  
end  
if(x>=1)  
printf("From Rouths table, it is clear that the system is unstable.")  
else  
printf("From Rouths table, it is clear that the system is stable.")  
end

18.
a)

clear; 
clc ; 
close ; 
x = [1,-1,-1,-1,1,1,1,-1]; 
//FFT Computation 
X = fft (x , -1); 
disp(X,'X(z) = ');

b)

clear; 
clc ; 
close ; 
x = [1,2,3,4,4,3,2,1]; 
//FFT Computation 
X = fft (x , -1); 
disp(X,'X(z) = ');


19.

//First Order Butterworth Low Pass Filter
clear;
clc;
close;
s = poly(0,'s');
Omegac = 0.2*%pi;
H = Omegac/(s+Omegac);
T =1;//Sampling period T = 1 Second
z = poly(0,'z');
Hz = horner(H,(2/T)*((z-1)/(z+1)))
HW =frmag(Hz(2),Hz(3),512);
W = 0:%pi/511:%pi;
plot(W/%pi,HW)
a=gca();
a.thickness = 3;
a.foreground = 1;
a.font_style = 9;
xgrid(1)
xtitle('Magnitude Response of Single pole LPF Filter Cutoff frequency = 0.2*pi','Digital Frequency--->','Magnitude');
Disp(“Hz”,Hz);

sine signal
f =50;
t =0:0.001:0.02;
x = sin (2* %pi * t * f ) ;
plot (t ,x ) 
title ( ' sine wave ' ) ;
xlabel ( ' t ' ) ;
ylabel ( ' x ' ) ;

exponential
t =0:0.1:10;
x = exp (t) ;
plot (t ,x ) 
title ( ' exponential wave ' ) ;
xlabel ( ' t ' ) ;
ylabel ( ' x ' ) ;

Random Signal
a = -1;  // Lower bound
b = 1;   // Upper bound
N = 1000;  // Number of samples
// Generate uniform random signal
t = 1:N;  // Time or sample index
y_uniform = a + (b - a) * rand(1, N);  // rand generates values between 0 and 1, scaled to [a, b]
// Plot the uniform random signal
plot(t, y_uniform, "LineWidth", 2);
xlabel("Samples (n)");
ylabel("Amplitude");
title("Uniform Random Signal");
